//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/InputActions/StarshipAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StarshipAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StarshipAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StarshipAction"",
    ""maps"": [
        {
            ""name"": ""StarInput"",
            ""id"": ""aa67f627-d1b4-4df9-b5c0-803fe1580c45"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a1227ad-8b4f-4eea-a8c8-6cf9080c6a38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9717f750-be99-4bba-b0c8-de27365ccfa7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Value"",
                    ""id"": ""5fce7707-50cf-4b63-ada9-f263a2abbab8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""34d22ad9-11f1-40e6-85cd-cbfc9d9f9a3e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""698fc91b-58b1-48fa-86c4-9b815da7eac6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0a31810-4200-4882-8ca5-f66ecba7b8c5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // StarInput
        m_StarInput = asset.FindActionMap("StarInput", throwIfNotFound: true);
        m_StarInput_Move = m_StarInput.FindAction("Move", throwIfNotFound: true);
        m_StarInput_Look = m_StarInput.FindAction("Look", throwIfNotFound: true);
        m_StarInput_Shot = m_StarInput.FindAction("Shot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // StarInput
    private readonly InputActionMap m_StarInput;
    private List<IStarInputActions> m_StarInputActionsCallbackInterfaces = new List<IStarInputActions>();
    private readonly InputAction m_StarInput_Move;
    private readonly InputAction m_StarInput_Look;
    private readonly InputAction m_StarInput_Shot;
    public struct StarInputActions
    {
        private @StarshipAction m_Wrapper;
        public StarInputActions(@StarshipAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_StarInput_Move;
        public InputAction @Look => m_Wrapper.m_StarInput_Look;
        public InputAction @Shot => m_Wrapper.m_StarInput_Shot;
        public InputActionMap Get() { return m_Wrapper.m_StarInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StarInputActions set) { return set.Get(); }
        public void AddCallbacks(IStarInputActions instance)
        {
            if (instance == null || m_Wrapper.m_StarInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StarInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Shot.started += instance.OnShot;
            @Shot.performed += instance.OnShot;
            @Shot.canceled += instance.OnShot;
        }

        private void UnregisterCallbacks(IStarInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Shot.started -= instance.OnShot;
            @Shot.performed -= instance.OnShot;
            @Shot.canceled -= instance.OnShot;
        }

        public void RemoveCallbacks(IStarInputActions instance)
        {
            if (m_Wrapper.m_StarInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStarInputActions instance)
        {
            foreach (var item in m_Wrapper.m_StarInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StarInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StarInputActions @StarInput => new StarInputActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IStarInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShot(InputAction.CallbackContext context);
    }
}
